<launch>
	<arg name="zed_svo_file"             default="" /> <!-- <arg name="svo_file" default="path/to/svo/file.svo"> -->
    <arg name="zed_stream"               default="" /> <!-- <arg name="stream" default="<ip_address>:<port>"> -->

    <arg name="zed_node_name"            default="zed_node" />
    <arg name="zed_camera_model"         default="zed2i" />
    <arg name="zed_publish_urdf"         default="true" />

    <arg name="zed_camera_name"          default="zed2i" />

    <arg name="zed_base_frame"           default="base_link" />

    <arg name="zed_cam_pos_x"             default="0.0" /> <!-- Position respect to base frame (i.e. "base_link) -->
    <arg name="zed_cam_pos_y"             default="0.0" /> <!-- Position respect to base frame (i.e. "base_link) -->
    <arg name="zed_cam_pos_z"             default="0.0" /> <!-- Position respect to base frame (i.e. "base_link) -->
    <arg name="zed_cam_roll"              default="0.0" /> <!-- Orientation respect to base frame (i.e. "base_link) -->
    <arg name="zed_cam_pitch"             default="0.0" /> <!-- Orientation respect to base frame (i.e. "base_link) -->
    <arg name="zed_cam_yaw"               default="0.0" /> <!-- Orientation respect to base frame (i.e. "base_link) -->

    <group ns="$(arg zed_camera_name)">
        <include file="$(find zed_wrapper)/launch/include/zed_camera.launch.xml">
            <arg name="camera_name"         value="$(arg zed_camera_name)" />
            <arg name="svo_file"            value="$(arg zed_svo_file)" />
            <arg name="stream"              value="$(arg zed_stream)" />
            <arg name="node_name"           value="$(arg zed_node_name)" />
            <arg name="camera_model"        value="$(arg zed_camera_model)" />
            <arg name="base_frame"          value="$(arg zed_base_frame)" />
            <arg name="publish_urdf"        value="$(arg zed_publish_urdf)" />
            <arg name="cam_pos_x"           value="$(arg zed_cam_pos_x)" />
            <arg name="cam_pos_y"           value="$(arg zed_cam_pos_y)" />
            <arg name="cam_pos_z"           value="$(arg zed_cam_pos_z)" />
            <arg name="cam_roll"            value="$(arg zed_cam_roll)" />
            <arg name="cam_pitch"           value="$(arg zed_cam_pitch)" />
            <arg name="cam_yaw"             value="$(arg zed_cam_yaw)" />
        </include>
    </group>
	    

	<arg name="lucid_respawn" default="true" />
    <arg name="lucid_debug" default="false" />
    <arg name="lucid_node_name" default="arena_camera_node" />
    <arg name="lucid_config_file" default="$(find arena_camera)/config/default.yaml" />

    <arg unless="$(arg lucid_debug)" name="launch_prefix" value="" />
    <arg     if="$(arg lucid_debug)" name="launch_prefix" value="gdb -ex run --args" />

	<!-- CAM1-->
    <node name="$(arg lucid_node_name)" pkg="arena_camera" type="arena_camera_node" output="screen"
          respawn="true" launch-prefix="$(arg launch_prefix)">
        <param name="device_user_id" type="string" value="DAQ_RGB"/>

    </node>
    <!-- CAM1 -->
    <node name="$(arg lucid_node_name)_2" pkg="arena_camera" type="arena_camera_node" output="screen"
        respawn="true" launch-prefix="$(arg launch_prefix)">
        <param name="device_user_id" type="string" value="DAQ_NIR"/>
    </node>
    
	<!-- velocdyne -->
	<!-- declare arguments with default values -->
	  <arg name="vlp16_calibration" default="$(find velodyne_pointcloud)/params/VLP16db.yaml"/>
	  <arg name="vlp16_device_ip" default="" />
	  <arg name="vlp16_frame_id" default="velodyne" />
	  <arg name="vlp16_manager" default="$(arg vlp16_frame_id)_nodelet_manager" />
	  <arg name="vlp16_max_range" default="130.0" />
	  <arg name="vlp16_min_range" default="0.4" />
	  <arg name="vlp16_pcap" default="" />
	  <arg name="vlp16_port" default="2368" />
	  <arg name="vlp16_read_fast" default="false" />
	  <arg name="vlp16_read_once" default="false" />
	  <arg name="vlp16_repeat_delay" default="0.0" />
	  <arg name="vlp16_rpm" default="600.0" />
	  <arg name="vlp16_gps_time" default="false" />
	  <arg name="vlp16_pcap_time" default="false" />
	  <arg name="vlp16_cut_angle" default="-0.01" />
	  <arg name="vlp16_timestamp_first_packet" default="false" />
	  <arg name="vlp16_laserscan_ring" default="-1" />
	  <arg name="vlp16_laserscan_resolution" default="0.007" />
	  <arg name="vlp16_organize_cloud" default="false" />

	  <!-- start nodelet manager and driver nodelets -->
	  <include file="$(find velodyne_driver)/launch/nodelet_manager.launch">
	    <arg name="device_ip" value="$(arg vlp16_device_ip)"/>
	    <arg name="frame_id" value="$(arg vlp16_frame_id)"/>
	    <arg name="manager" value="$(arg vlp16_manager)" />
	    <arg name="model" value="VLP16"/>
	    <arg name="pcap" value="$(arg vlp16_pcap)"/>
	    <arg name="port" value="$(arg vlp16_port)"/>
	    <arg name="read_fast" value="$(arg vlp16_read_fast)"/>
	    <arg name="read_once" value="$(arg vlp16_read_once)"/>
	    <arg name="repeat_delay" value="$(arg vlp16_repeat_delay)"/>
	    <arg name="rpm" value="$(arg vlp16_rpm)"/>
	    <arg name="gps_time" value="$(arg vlp16_gps_time)"/>
	    <arg name="pcap_time" value="$(arg vlp16_pcap_time)"/>
	    <arg name="cut_angle" value="$(arg vlp16_cut_angle)"/>
	    <arg name="timestamp_first_packet" value="$(arg vlp16_timestamp_first_packet)"/>
	  </include>

	  <!-- start transform nodelet -->
	  <include file="$(find velodyne_pointcloud)/launch/transform_nodelet.launch">
	    <arg name="model" value="VLP16"/>
	    <arg name="calibration" value="$(arg vlp16_calibration)"/>
	    <arg name="manager" value="$(arg vlp16_manager)" />
	    <arg name="fixed_frame" value="" />
	    <arg name="target_frame" value="" />
	    <arg name="max_range" value="$(arg vlp16_max_range)"/>
	    <arg name="min_range" value="$(arg vlp16_min_range)"/>
	    <arg name="organize_cloud" value="$(arg vlp16_organize_cloud)"/>
	  </include>

	  <!-- start laserscan nodelet -->
	  <include file="$(find velodyne_pointcloud)/launch/laserscan_nodelet.launch">
	    <arg name="manager" value="$(arg vlp16_manager)" />
	    <arg name="ring" value="$(arg vlp16_laserscan_ring)"/>
	    <arg name="resolution" value="$(arg vlp16_laserscan_resolution)"/>
	  </include>

	<!-- CAN -->
	<group ns="can">
        <node name="ros_rdv_can2_communication" pkg="ros_rdv_can2_communication" type="imu.py" output="screen" >
            <param name="imu_link" value="imu_link" />
            <param name="pub_imu_topic" value="imu" />
            <param name="pub_can_topic" value="can_raw" />
            <param name="can_n" value="can0" />
            <param name="imu_can_id" type="int" value="1" />
        </node>
    </group>

	<node pkg="ros_rdv_daq_ui" type="ros_rdv_daq_ui" respawn="true" name="ros_rdv_daq_ui" output="screen" />

	<node pkg="ros_rdv_rosbag_recorder" type="ros_rdv_rosbag_recorder" respawn="true" name="ros_rdv_rosbag_recorder" output="screen" />
-->
	<param name="rosgab_rec_path" type="str" value="초기화 중"/>
</launch>
